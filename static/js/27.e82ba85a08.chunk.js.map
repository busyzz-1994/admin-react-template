{"version":3,"sources":["hooks/useResetFormOnCloseModal.tsx","hooks/useSetState.ts","pages/table/combination/column.tsx","utils/request.ts","service/index.ts","service/table.ts","pages/table/combination/index.tsx"],"names":["useResetFormOnCloseModal","form","visible","prevVisibleRef","useRef","useEffect","current","prevVisible","resetFields","useSetState","initialState","useState","state","set","setState","useCallback","patch","prevState","Object","assign","Function","columns","title","dataIndex","sorter","render","name","first","last","width","fixed","filters","text","value","key","errorCodeMap","request","extend","getResponse","interceptors","use","url","options","console","log","response","status","message","error","Promise","reject","Error","service","table","getList","get","CombinationTable","selectedRowKeys","setSelectedRowKeys","data","pagination","pageSize","total","loading","tableInfo","setTableInfo","getRandomuserParams","params","newParams","results","page","fetch","then","map","item","index","type","showIcon","rowKey","style","marginTop","dataSource","rowSelection","onChange","sortField","field","sortOrder","order","scroll","x"],"mappings":"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","file":"static/js/27.e82ba85a08.chunk.js","sourcesContent":["import { useRef, useEffect } from 'react';\nimport { FormInstance } from 'antd/lib/form';\n/**\n * @desc Modal类型的表单，关闭时自动重置表单\n */\nconst useResetFormOnCloseModal = ({\n  form,\n  visible,\n}: {\n  form: FormInstance;\n  visible: boolean;\n}) => {\n  const prevVisibleRef = useRef<boolean>();\n  useEffect(() => {\n    prevVisibleRef.current = visible;\n  }, [visible]);\n  const prevVisible = prevVisibleRef.current;\n  useEffect(() => {\n    if (!visible && prevVisible) {\n      form.resetFields();\n    }\n  }, [visible, form, prevVisible]);\n};\n\nexport default useResetFormOnCloseModal;\n","import { useCallback, useState } from 'react';\n\nconst useSetState = <T extends object>(\n  initialState: T = {} as T\n): [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void] => {\n  const [state, set] = useState<T>(initialState);\n  const setState = useCallback((patch) => {\n    set((prevState) =>\n      Object.assign(\n        {},\n        prevState,\n        patch instanceof Function ? patch(prevState) : patch\n      )\n    );\n  }, []);\n\n  return [state, setState];\n};\n\nexport default useSetState;\n","/*\n * @Author: busyzz\n * @Date: 2021-09-01 15:22:16\n * @Description:\n */\nimport { ColumnProps } from 'antd/lib/table';\nimport { RecordType } from './type';\nexport const columns: ColumnProps<RecordType>[] = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: true,\n    render: (name) => `${name.first} ${name.last}`,\n    width: 100,\n    fixed: 'left',\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    filters: [\n      { text: 'Male', value: 'male' },\n      { text: 'Female', value: 'female' },\n    ],\n    width: 100,\n    fixed: 'left',\n  },\n  { title: 'Column 1', dataIndex: 'email', key: '1' },\n  { title: 'Column 2', dataIndex: 'email', key: '2' },\n  { title: 'Column 3', dataIndex: 'email', key: '3' },\n  { title: 'Column 4', dataIndex: 'email', key: '4' },\n  { title: 'Column 5', dataIndex: 'email', key: '5' },\n  { title: 'Column 6', dataIndex: 'email', key: '6' },\n  { title: 'Column 7', dataIndex: 'email', key: '7' },\n  { title: 'Column 8', dataIndex: 'email', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a>action</a>,\n  },\n];\n","/*\n * @Author: busyzz\n * @Date: 2021-09-01 19:42:04\n * @Description:\n */\nimport { message } from 'antd';\nimport { extend } from 'umi-request';\nconst errorCodeMap = {\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。',\n};\nconst request = extend({\n  getResponse: true,\n});\n// request拦截器, 改变 url 或 options.\nrequest.interceptors.request.use((url, options) => {\n  console.log(url, '--url--');\n  console.log(options, '--options--');\n  return {\n    url,\n    options: { ...options, interceptors: true },\n  };\n});\n// 提前对响应做异常处理\nrequest.interceptors.response.use((response) => {\n  // 这个地方也可以用来判断用户是否登陆，未登陆跳转到登陆页面\n  // 判断 http 状态码\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else {\n    message.error(errorCodeMap[response.status]);\n    return Promise.reject(new Error(errorCodeMap[response.status]));\n  }\n});\n\nexport default request;\n","/*\n * @Author: busyzz\n * @Date: 2021-09-01 20:13:00\n * @Description:\n */\nimport table from './table';\n\nconst service = {\n  table,\n};\n\nexport default service;\n","/*\n * @Author: busyzz\n * @Date: 2021-09-01 20:13:07\n * @Description:\n */\nimport request from 'utils/request';\n\nconst service = {\n  getList: <T = any>(options) => {\n    return request.get<T>('https://randomuser.me/api', options);\n  },\n};\nexport default service;\n","/*\n * @Author: busyzz\n * @Date: 2021-09-01 11:55:16\n * @Description:\n */\nimport React, { FC, useState, useEffect } from 'react';\nimport { Alert, Table } from 'antd';\nimport { TableProps, TablePaginationConfig } from 'antd/lib/table';\nimport { SorterResult } from 'antd/lib/table/interface';\nimport { RecordType, ListQueryParams, ListResponse } from './type';\nimport { columns } from './column';\nimport { useSetState } from 'hooks';\nimport service from 'service';\n\nconst CombinationTable: FC = () => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState<Array<string>>([]);\n  // table 相关数据\n  const [tableInfo, setTableInfo] = useSetState<{\n    data: RecordType[];\n    pagination: TablePaginationConfig;\n    loading: boolean;\n  }>({\n    data: [],\n    pagination: {\n      current: 1,\n      pageSize: 10,\n      total: 0,\n    },\n    loading: false,\n  });\n  const onSelectChange = (selectedRowKeys) => {\n    setSelectedRowKeys(selectedRowKeys);\n  };\n  const handleTableChange: TableProps<RecordType>['onChange'] = (\n    pagination,\n    filters,\n    sorter\n  ) => {\n    sorter = sorter as SorterResult<RecordType>;\n    fetch({\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      pagination,\n      ...filters,\n    });\n  };\n  const getRandomuserParams = (params: ListQueryParams) => {\n    const newParams = {\n      results: params.pagination.pageSize,\n      page: params.pagination.current,\n      ...params,\n    };\n    delete newParams.pagination;\n    return newParams;\n  };\n  const fetch = (params: ListQueryParams) => {\n    setTableInfo({ loading: true });\n    service.table\n      .getList<ListResponse>({\n        params: getRandomuserParams(params),\n      })\n      .then(({ data }) => {\n        setTableInfo({\n          loading: false,\n          data: data.results.map((item, index) => ({ ...item, index })),\n          pagination: {\n            ...params.pagination,\n            total: 200,\n          },\n        });\n      });\n  };\n  useEffect(() => {\n    fetch({\n      pagination: tableInfo.pagination,\n    });\n  }, []);\n  return (\n    <div>\n      <Alert\n        message='更多 table API 查看：https://ant.design/components/table-cn/'\n        type='info'\n        showIcon\n      />\n      <Table\n        rowKey='email'\n        style={{ marginTop: 20 }}\n        columns={columns}\n        dataSource={tableInfo.data}\n        rowSelection={{\n          selectedRowKeys,\n          onChange: onSelectChange,\n        }}\n        loading={tableInfo.loading}\n        onChange={handleTableChange}\n        pagination={tableInfo.pagination}\n        scroll={{ x: 1500 }}\n      />\n    </div>\n  );\n};\n\nexport default CombinationTable;\n"],"sourceRoot":""}