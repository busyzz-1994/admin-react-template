{"version":3,"sources":["config/layout.tsx","hooks/useResetFormOnCloseModal.tsx","hooks/useSetState.ts","pages/form/standard/dynamic/index.module.scss","pages/form/standard/dynamic/userForm/index.tsx","pages/form/standard/dynamic/index.tsx"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","useResetFormOnCloseModal","form","visible","prevVisibleRef","useRef","useEffect","current","prevVisible","resetFields","useSetState","initialState","useState","state","set","setState","useCallback","patch","prevState","Object","assign","Function","module","exports","UserForm","onCancel","Form","useForm","title","onOk","submit","layout","name","Item","label","rules","required","Dynamic","setVisible","showUserModal","message","type","showIcon","Provider","onFormFinish","values","forms","basicForm","users","getFieldValue","setFieldsValue","onFinish","finallyValue","console","log","className","styles","scrollToFirstError","autoComplete","initialValues","names","first","last","age","List","validator","_","a","length","Promise","reject","Error","fields","add","remove","map","key","fieldKey","restField","align","style","marginBottom","placeholder","width","MinusCircleOutlined","onClick","warn","block","icon","PlusOutlined","shouldUpdate","prevValues","curValues","props","userContainer","user","index","marginRight","UserOutlined","Text","SmileOutlined","marginTop","htmlType"],"mappings":"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","file":"static/js/22.4611d77791.chunk.js","sourcesContent":["export const formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nexport const tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n","import { useRef, useEffect } from 'react';\nimport { FormInstance } from 'antd/lib/form';\n/**\n * @desc Modal类型的表单，关闭时自动重置表单\n */\nconst useResetFormOnCloseModal = ({\n  form,\n  visible,\n}: {\n  form: FormInstance;\n  visible: boolean;\n}) => {\n  const prevVisibleRef = useRef<boolean>();\n  useEffect(() => {\n    prevVisibleRef.current = visible;\n  }, [visible]);\n  const prevVisible = prevVisibleRef.current;\n  useEffect(() => {\n    if (!visible && prevVisible) {\n      form.resetFields();\n    }\n  }, [visible, form, prevVisible]);\n};\n\nexport default useResetFormOnCloseModal;\n","import { useCallback, useState } from 'react';\n\nconst useSetState = <T extends object>(\n  initialState: T = {} as T\n): [T, (patch: Partial<T> | ((prevState: T) => Partial<T>)) => void] => {\n  const [state, set] = useState<T>(initialState);\n  const setState = useCallback((patch) => {\n    set((prevState) =>\n      Object.assign(\n        {},\n        prevState,\n        patch instanceof Function ? patch(prevState) : patch\n      )\n    );\n  }, []);\n\n  return [state, setState];\n};\n\nexport default useSetState;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-container\":\"dynamic_form-container__3ZRE7\"};","import React, { FC } from 'react';\nimport { Modal, Form, Input, InputNumber } from 'antd';\nimport { useResetFormOnCloseModal } from 'hooks';\nimport { UserType } from '../index';\ninterface UserFormProps {\n  visible: boolean;\n  onCancel: () => void;\n}\nconst UserForm: FC<UserFormProps> = ({ visible, onCancel }) => {\n  const [form] = Form.useForm<UserType>();\n  useResetFormOnCloseModal({ form, visible });\n  const onOk = () => {\n    form.submit();\n  };\n  return (\n    <Modal\n      title='Basic Drawer'\n      visible={visible}\n      onOk={onOk}\n      onCancel={onCancel}\n    >\n      <Form form={form} layout='vertical' name='userForm'>\n        <Form.Item name='name' label='User Name' rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='age' label='User Age' rules={[{ required: true }]}>\n          <InputNumber />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default UserForm;\n","import React, { FC, useState } from 'react';\nimport {\n  Form,\n  Alert,\n  Space,\n  Input,\n  Button,\n  message,\n  Typography,\n  Avatar,\n} from 'antd';\nimport {\n  MinusCircleOutlined,\n  PlusOutlined,\n  UserOutlined,\n  SmileOutlined,\n} from '@ant-design/icons';\nimport styles from './index.module.scss';\nimport { formItemLayout, tailFormItemLayout } from 'config/layout';\nimport UserModalForm from './userForm';\nexport interface UserType {\n  name: string;\n  age: string;\n}\nconst { useForm } = Form;\nconst Dynamic: FC = () => {\n  const [form] = useForm();\n  const [visible, setVisible] = useState(false);\n  const onFinish = (values) => {\n    const finallyValue = {\n      users: form.getFieldValue('users'),\n      ...values,\n    };\n    console.log(finallyValue, 'values');\n  };\n  const hideUserModal = () => {\n    setVisible(false);\n  };\n  const showUserModal = () => {\n    setVisible(true);\n  };\n  return (\n    <div>\n      <Alert\n        message='表单更多 API 请查看：https://ant.design/components/form-cn'\n        type='info'\n        showIcon\n      />\n      <Form.Provider\n        onFormFinish={(name, { values, forms }) => {\n          if (name === 'userForm') {\n            const { basicForm } = forms;\n            const users = basicForm.getFieldValue('users') || [];\n            basicForm.setFieldsValue({ users: [...users, values] });\n            setVisible(false);\n          }\n        }}\n      >\n        <Form\n          onFinish={onFinish}\n          form={form}\n          className={styles['form-container']}\n          scrollToFirstError\n          autoComplete='off'\n          name='basicForm'\n          initialValues={{\n            names: [{ first: 'busyzz', last: 'busyzz123@gmail.com' }],\n            users: [\n              {\n                name: 'bss',\n                age: 26,\n              },\n            ],\n          }}\n          {...formItemLayout}\n        >\n          <Form.List\n            name='names'\n            rules={[\n              {\n                validator: async (_, names) => {\n                  if (!names || names.length < 1) {\n                    return Promise.reject(new Error('至少需要输入一个用户'));\n                  }\n                },\n              },\n            ]}\n          >\n            {(fields, { add, remove }) => (\n              <>\n                {fields.map(({ key, name, fieldKey, ...restField }) => (\n                  <Form.Item key={fieldKey} label='输入姓名' required>\n                    <Space align='baseline'>\n                      <Form.Item\n                        {...restField}\n                        name={[name, 'first']}\n                        fieldKey={[fieldKey, 'first']}\n                        wrapperCol={{ span: 24 }}\n                        rules={[\n                          { required: true, message: 'Missing first name' },\n                        ]}\n                        style={{\n                          marginBottom: 0,\n                        }}\n                      >\n                        <Input placeholder='First Name' />\n                      </Form.Item>\n                      <Form.Item\n                        {...restField}\n                        name={[name, 'last']}\n                        fieldKey={[fieldKey, 'last']}\n                        wrapperCol={{ span: 24 }}\n                        rules={[\n                          { required: true, message: 'Missing last name' },\n                        ]}\n                        style={{\n                          marginBottom: 0,\n                        }}\n                      >\n                        <Input\n                          style={{ width: '100%' }}\n                          placeholder='Last Name'\n                        />\n                      </Form.Item>\n                      <MinusCircleOutlined\n                        onClick={() => {\n                          if (fields.length > 1) {\n                            remove(name);\n                          } else {\n                            message.warn('至少输入一条数据');\n                          }\n                        }}\n                      />\n                    </Space>\n                  </Form.Item>\n                ))}\n                <Form.Item {...tailFormItemLayout}>\n                  <Button\n                    type='dashed'\n                    onClick={() => add()}\n                    block\n                    icon={<PlusOutlined />}\n                  >\n                    Add field\n                  </Button>\n                </Form.Item>\n              </>\n            )}\n          </Form.List>\n          <Form.Item\n            label='User List'\n            shouldUpdate={(prevValues, curValues) =>\n              prevValues.users !== curValues.users\n            }\n          >\n            {(props) => {\n              const { getFieldValue } = props;\n              const users: UserType[] = getFieldValue('users') || [];\n              return (\n                <>\n                  {users.length ? (\n                    <div className={styles.userContainer}>\n                      {users.map((user, index) => (\n                        <div key={index} className='user'>\n                          <Avatar\n                            style={{ marginRight: 10 }}\n                            icon={<UserOutlined />}\n                          />\n                          {user.name} - {user.age}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <Typography.Text className='ant-form-text' type='secondary'>\n                      ( <SmileOutlined /> No user yet. )\n                    </Typography.Text>\n                  )}\n                  <Button style={{ marginTop: 10 }} onClick={showUserModal}>\n                    添加用户\n                  </Button>\n                </>\n              );\n            }}\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n        <UserModalForm visible={visible} onCancel={hideUserModal} />\n      </Form.Provider>\n    </div>\n  );\n};\n\nexport default Dynamic;\n"],"sourceRoot":""}